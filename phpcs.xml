<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="pcsg-generated-ruleset">
<description>Created with the PHP Coding Standard Generator. http://edorian.github.com/php-coding-standard-generator/
</description>
<rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
        <rule ref="Generic.Classes.DuplicateClassName"/>

        <rule ref="Generic.CodeAnalysis.EmptyStatement"/>
        <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
        <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
        <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
        <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
        <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
        <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
        <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>

        <rule ref="Generic.Commenting"/>

        <rule ref="Generic.ControlStructures.InlineControlStructure"/>

        <rule ref="Generic.Debug.ClosureLinter"/>

        <rule ref="Generic.Files.ByteOrderMark"/>
        <rule ref="Generic.Files.LineEndings"/>
        <rule ref="Generic.Files.LineLength">
            <severity>3</severity>
            <properties>
                <property name="lineLimit" value="120"/>
                <property name="absoluteLineLimit" value="0"/>
            </properties>
        </rule>

        <rule ref="Generic.Formatting.MultipleStatementAlignment"/>
        <rule ref="Generic.Formatting.NoSpaceAfterCast"/>

        <rule ref="Generic.Functions.CallTimePassByReference"/>
        <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
        <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>

        <rule ref="Generic.Metrics.CyclomaticComplexity">
            <properties>
                <property name="complexity" value="10" />
                <property name="absoluteComplexity" value="35" />
            </properties>
        </rule>
        <rule ref="Generic.Metrics.NestingLevel"/>

        <rule ref="Generic.NamingConventions.ConstructorName"/>
        <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
        <rule ref="Generic.NamingConventions.CamelCapsFunctionName"/>

        <rule ref="Generic.PHP.DeprecatedFunctions"/>
        <rule ref="Generic.PHP.DisallowShortOpenTag"/>
        <rule ref="Generic.PHP.ForbiddenFunctions"/>
        <rule ref="Generic.PHP.LowerCaseConstant"/>
        <rule ref="Generic.PHP.NoSilencedErrors"/>

        <rule ref="Generic.Strings.UnnecessaryStringConcat"/>

        <rule ref="PEAR.NamingConventions.ValidClassName"/>
        <rule ref="PEAR.NamingConventions.ValidFunctionName"/>
        <rule ref="PEAR.NamingConventions.ValidVariableName"/>

        <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
        <rule ref="Generic.WhiteSpace.ScopeIndent"/>

        <rule ref="PSR1">
            <exclude name="PSR1.Classes.ClassDeclaration.MissingNamespace" />
        </rule>

        <rule ref="PSR2">
            <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine" />
            <exclude name="Squiz.ControlStructures.ControlSignature" />
            <exclude name="PSR2.ControlStructures.ControlStructureSpacing" />
        </rule>

        <rule ref="Squiz.PHP.CommentedOutCode"/>
        <!-- <rule ref="Squiz.PHP.DisallowObEndFlush"/> -->
        <rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
        <rule ref="Squiz.PHP.DiscouragedFunctions"/>
        <rule ref="Squiz.PHP.EmbeddedPhp"/>
        <!-- <rule ref="Squiz.PHP.ForbiddenFunctions"/> -->
        <rule ref="Squiz.PHP.InnerFunctions"/>
        <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
        <rule ref="Squiz.PHP.NonExecutableCode"/>
        <rule ref="Squiz.Scope.MemberVarScope"/>
        <rule ref="Squiz.Scope.MethodScope"/>
        <rule ref="Squiz.Scope.StaticThisUsage"/>
        <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

        <rule ref="Zend.NamingConventions.ValidVariableName"/>
</ruleset>
